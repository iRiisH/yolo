Code example site:
https://github.com/thtrieu/darkflow.git

General idea of the code:
1. Build the net
2. Train it

In /darkflow/flow.py:
    ("main function")

        define parameters
            (line7 to line29)
            (put all external parameters in FLAGS)
            (important constants as follow:)

            lr: learning rate

            load: decide whether to load from a checkpoint

            keep: number of most recent trained version to save

        build network
            (calling TFNet() in /darkflow/net/build.py)
            (with FLAGS as parameters)

        train network
            (line52 to line54)
            (calling tfnet.train())
            (tfnet.train is defined in /darkflow/net/build.py)
            (but its true definition is in /darkflow/net/flow.py)

In /net/build.py:

        define the class TFNet
            (important members as follow: )

            train: our training function

            build_train_op: function to set up training process
                (in /darkflow/net/help.py)

            load_from_ckpt: function to load the network of the latest trained version
                (in /darkflow/net/help.py)

        __init__(self, FLAGS, darknet)
            (darknet is an object that tells the structure of the network)
            (like how many convolutional layer, etc.)

            ntrain: a variable to note that whether we are debugging (?)

            construct a darknet
                (line33 to line38)
                (calling Darknet() in /darkflow/dark/darknet.py)

            create a framework
                (line41)
                (a framework that contains information of which "total process" is being used)
                (like how is the loss function, how we preprocess the data, etc)
                (calling create_framework() in /darkflow/net/framework.py)

            build a tf.Graph according darknet and framework
                (line48 to line51)
                (calling build_forward() and setup_meta_ops() below)

        build_forward

            create placeholders

            create operations in the network
                (calling op_create from /darkflow/net/ops/__init__.py)

        setup_meta_ops

            make clear using GPU or CPU or what
                (cfg:)
                (allow_soft_placement: if the assigned device cannot be found, allow tf to
                    find a replacement by itself of not)
                (log_device_placement: print or not the information about which devices are
                    running which operations)

            if we are debugging, do not save the result,

            else add Saver operation to do saving

        savepb (unknown)

In /darkflow/net/flow.py:

        _save_ckpt (unknown)

        train

            loss_ph
                (cannot figure out where it comes from)
                (placeholder for )
